{
    "docs": [
        {
            "location": "/", 
            "text": "Wallace\n\n\nAn automated platform for online, experimental evolution\n\n\nWant to take Wallace for a test drive? Start \nhere\n.\n\n\nWant to learn more? Try \nhere\n.\n\n\nFeel like contributing to Wallace? Great! Start \nhere\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/#wallace", 
            "text": "", 
            "title": "Wallace"
        }, 
        {
            "location": "/#an-automated-platform-for-online-experimental-evolution", 
            "text": "Want to take Wallace for a test drive? Start  here .  Want to learn more? Try  here .  Feel like contributing to Wallace? Great! Start  here .", 
            "title": "An automated platform for online, experimental evolution"
        }, 
        {
            "location": "/Installing-Wallace-(for-users)/", 
            "text": "If you would like to contribute to Wallace please follow these \nalternative install instructions\n.\n\n\nInstall Python\n\n\nWallace is written in the language Python. For it to work you will need to have Python 2.7 installed. You can check what version of Python you have by running:\n\n\npython --version\n\n\n\n\nIf you do not have Python 2.7 installed, you can install it from the [Python website] (https://www.python.org/downloads/). \n\n\nInstall Postgres\n\n\nWallace uses Postgres to create local databases. Install Postgres from \npostgresapp.com\n. This will require downloading a zip file, unzipping the file and installing the unzipped application. \n\n\nYou will then need to add Postgres to your PATH environmental variable. If you use the default location for installing applications on OS X (namely \n/Applications\n), you can adjust your path by running the following command:\n\n\nexport PATH=\n/Applications/Postgres.app/Contents/Versions/9.3/bin:$PATH\n\n\n\n\n\nNB: If you have installed a more recent version of Postgres (e.g., the \nthe upcoming version 9.4\n) you may need to alter that command slightly to accommodate the more recent version number. If you need to \u2013 or want to \u2013 double check which version to include, then run:    \n\n\nls /Applications/Postgres.app/Contents/Versions/\n\n\n\n\nWhatever number that returns is the version number that you should place in the \nexport\n command above. If it does not return a number, you have not installed Postgres correctly in your /Applications folder or something else is horribly wrong.\n\n\nCreate the Database\n\n\nAfter installing Postgres, you will need to create a database for your experiment to use. Run the following command from the comand line:\n\n\npsql -c 'create database wallace;' -U postgres\n\n\n\n\nInstall Wallace\n\n\nInstall Wallace from the terminal by running\n\n\npip install wallace\n\n\n\n\nTest that your installation works by running:\n\n\nwallace --version", 
            "title": "For users"
        }, 
        {
            "location": "/Installing-Wallace-(for-users)/#install-python", 
            "text": "Wallace is written in the language Python. For it to work you will need to have Python 2.7 installed. You can check what version of Python you have by running:  python --version  If you do not have Python 2.7 installed, you can install it from the [Python website] (https://www.python.org/downloads/).", 
            "title": "Install Python"
        }, 
        {
            "location": "/Installing-Wallace-(for-users)/#install-postgres", 
            "text": "Wallace uses Postgres to create local databases. Install Postgres from  postgresapp.com . This will require downloading a zip file, unzipping the file and installing the unzipped application.   You will then need to add Postgres to your PATH environmental variable. If you use the default location for installing applications on OS X (namely  /Applications ), you can adjust your path by running the following command:  export PATH= /Applications/Postgres.app/Contents/Versions/9.3/bin:$PATH   NB: If you have installed a more recent version of Postgres (e.g., the  the upcoming version 9.4 ) you may need to alter that command slightly to accommodate the more recent version number. If you need to \u2013 or want to \u2013 double check which version to include, then run:      ls /Applications/Postgres.app/Contents/Versions/  Whatever number that returns is the version number that you should place in the  export  command above. If it does not return a number, you have not installed Postgres correctly in your /Applications folder or something else is horribly wrong.", 
            "title": "Install Postgres"
        }, 
        {
            "location": "/Installing-Wallace-(for-users)/#create-the-database", 
            "text": "After installing Postgres, you will need to create a database for your experiment to use. Run the following command from the comand line:  psql -c 'create database wallace;' -U postgres", 
            "title": "Create the Database"
        }, 
        {
            "location": "/Installing-Wallace-(for-users)/#install-wallace", 
            "text": "Install Wallace from the terminal by running  pip install wallace  Test that your installation works by running:  wallace --version", 
            "title": "Install Wallace"
        }, 
        {
            "location": "/Developing-Wallace-(setup-guide)/", 
            "text": "Getting Started: Developing Wallace\n\n\nInstall Python 2.7\n\n\nYou will need Python 2.7. You can check what version of Python you have by running:\n    \npython --version\n\nIf you do not have Python 2.7 installed, you can install it from the [Python website] (https://www.python.org/downloads/).\n\n\nOr, if you know \nbrew\n:\n\n\nbrew install python\n\n\n\n\nIf you have Python 3.x installed and and symlinked to the command \npython\n you will need to create a \nvirtualenv\n that interprets the code as \npython2.7\n (because of compatibility with the \npsiturk\n module). Fortunately, we will be creating a virtual environment anyway, so as long as you run \nbrew install python\n and you don't run into any errors because of your symlinks then you can just proceed with the instructions. If you do run into any errors, may god have pity on your soul (or your python installation\u2026 whichever proves to be easier). \n\n\nInstall Postgres using \nbrew\n\n\nbrew install postgres\n\n\n\n\n\n\nSetting up a virtual environment\n\n\nIf you would like to develop Wallace (or if you primarily use Python3), you will need to set up a virtual environment (you only need to run these commands once):\n\n\npip install virtualenv\npip install virtualenvwrapper\nexport WORKON_HOME=$HOME/.virtualenvs\nmkdir -p $WORKON_HOME\nsource $(which virtualenvwrapper.sh)\nmkvirtualenv wallace --python /usr/local/bin/python2.7\n\n\n\n\nThese commands use \npip\n the python package manager to install two packages \nvirtualenv\n and \nvirtualenvwrapper\n. They set up an environmental variable named \nWORKON_HOME\n with a string that gives a path to a subfolder of your home directory (\n~\n) called \nEnvs\n, which the next command (\nmkdir\n) then makes according to the path described in \n$WORKON_HOME\n (recursively, due to the \n-p\n flag). That is where your environments will be stored. The \nsource\n command will run the command that follows, which in this case locates the the \nvirtualenvwrapper.sh\n shell script the contents of which are beyond the scope of this setup tutorial. If you want to know what it does a more in depth description can be found at \nthis page on \nvirtualenvwrapper.sh\n. Finally the \nmkvirtualenv\n makes your first virtual environment which you've named \nwallace\n. We have explicitly passed it the location of \npython2.7\n so that even if your \npython\n command has been remapped to \npython3\n it will create the environment with \npython2.7\n as its interpreter.\n\n\nIn the future, you can work on your virtual environment by running:\n\n\nsource $(which virtualenvwrapper.sh)\nworkon wallace\n\n\n\n\nNB: \nTo stop working on the virtual environment, just run \ndeactivate\n.\n If you ever need to see what environments you have (if you don't remember their names) use the command \nworkon\n with no arguments\n\n\nInstalling Wallace\n\n\nNow, navigate to the directory in which you want to house your development work on Wallace. Once you are there, clone the git repository using:\n\n\ngit clone https://github.com/suchow/Wallace\n\n\n\n\nThis will create a directory called \nWallace\n in your current directory. \n\n\nChange into your the new directory and make sure you are in your virtual environment before installing the dependencies. If you want to be extra carfeul, run the command \nworkon wallace\n, which will ensure that you are in the right virtual environment.\n\n\ncd Wallace\n\n\n\n\nNow we need to install the dependencies by running the following command:\n\n\npip install -r requirements.txt\n\n\n\n\nThen run \nsetup.py\n with the argument \ndevelop\n:\n\n\npython setup.py develop\n\n\n\n\nTest that your installation works by running:\n\n\nwallace --version\n\n\n\n\nNote: if you are using Anaconda and get a long traceback here, please see the special \nAnaconda installation instructions\n.\n\n\nOnce that's finished, we need to input the credentials for 3rd party applications including Amazon Web Services (AWS), Amazon Mechanical Turk (AMT), PsiTurk \n Heroku. \nInstructions for this process as it applies to Wallace live at this page.", 
            "title": "For developers"
        }, 
        {
            "location": "/Developing-Wallace-(setup-guide)/#getting-started-developing-wallace", 
            "text": "", 
            "title": "Getting Started: Developing Wallace"
        }, 
        {
            "location": "/Developing-Wallace-(setup-guide)/#install-python-27", 
            "text": "You will need Python 2.7. You can check what version of Python you have by running:\n     python --version \nIf you do not have Python 2.7 installed, you can install it from the [Python website] (https://www.python.org/downloads/).  Or, if you know  brew :  brew install python  If you have Python 3.x installed and and symlinked to the command  python  you will need to create a  virtualenv  that interprets the code as  python2.7  (because of compatibility with the  psiturk  module). Fortunately, we will be creating a virtual environment anyway, so as long as you run  brew install python  and you don't run into any errors because of your symlinks then you can just proceed with the instructions. If you do run into any errors, may god have pity on your soul (or your python installation\u2026 whichever proves to be easier).", 
            "title": "Install Python 2.7"
        }, 
        {
            "location": "/Developing-Wallace-(setup-guide)/#install-postgres-using-brew", 
            "text": "brew install postgres", 
            "title": "Install Postgres using brew"
        }, 
        {
            "location": "/Developing-Wallace-(setup-guide)/#setting-up-a-virtual-environment", 
            "text": "If you would like to develop Wallace (or if you primarily use Python3), you will need to set up a virtual environment (you only need to run these commands once):  pip install virtualenv\npip install virtualenvwrapper\nexport WORKON_HOME=$HOME/.virtualenvs\nmkdir -p $WORKON_HOME\nsource $(which virtualenvwrapper.sh)\nmkvirtualenv wallace --python /usr/local/bin/python2.7  These commands use  pip  the python package manager to install two packages  virtualenv  and  virtualenvwrapper . They set up an environmental variable named  WORKON_HOME  with a string that gives a path to a subfolder of your home directory ( ~ ) called  Envs , which the next command ( mkdir ) then makes according to the path described in  $WORKON_HOME  (recursively, due to the  -p  flag). That is where your environments will be stored. The  source  command will run the command that follows, which in this case locates the the  virtualenvwrapper.sh  shell script the contents of which are beyond the scope of this setup tutorial. If you want to know what it does a more in depth description can be found at  this page on  virtualenvwrapper.sh . Finally the  mkvirtualenv  makes your first virtual environment which you've named  wallace . We have explicitly passed it the location of  python2.7  so that even if your  python  command has been remapped to  python3  it will create the environment with  python2.7  as its interpreter.  In the future, you can work on your virtual environment by running:  source $(which virtualenvwrapper.sh)\nworkon wallace  NB:  To stop working on the virtual environment, just run  deactivate .  If you ever need to see what environments you have (if you don't remember their names) use the command  workon  with no arguments", 
            "title": "Setting up a virtual environment"
        }, 
        {
            "location": "/Developing-Wallace-(setup-guide)/#installing-wallace", 
            "text": "Now, navigate to the directory in which you want to house your development work on Wallace. Once you are there, clone the git repository using:  git clone https://github.com/suchow/Wallace  This will create a directory called  Wallace  in your current directory.   Change into your the new directory and make sure you are in your virtual environment before installing the dependencies. If you want to be extra carfeul, run the command  workon wallace , which will ensure that you are in the right virtual environment.  cd Wallace  Now we need to install the dependencies by running the following command:  pip install -r requirements.txt  Then run  setup.py  with the argument  develop :  python setup.py develop  Test that your installation works by running:  wallace --version  Note: if you are using Anaconda and get a long traceback here, please see the special  Anaconda installation instructions .  Once that's finished, we need to input the credentials for 3rd party applications including Amazon Web Services (AWS), Amazon Mechanical Turk (AMT), PsiTurk   Heroku.  Instructions for this process as it applies to Wallace live at this page.", 
            "title": "Installing Wallace"
        }, 
        {
            "location": "/AWS-etc-keys/", 
            "text": "Before you can use Wallace you will need accounts with the following services, which will make it possible for you to deploy Wallace experiments on the web: \npsiTurk\n, \nAmazon Web Services\n, \nAmazon Mechanical Turk\n, \n \nHeroku\n.\n\n\nIn addition to signing up for the relevant accounts you will need to set up your environment such that Wallace is able to access your accounts. \n\n\nThis involves first creating an API Key access file so that it can connect to your psiTurk and Amazon Web Services accounts. Wallace interfaces with Amazon Mechanical Turk via your Amazon Web Services Account. \n\n\nYou then will need to set up your command line installation of the Heroku toolset to be able to log in to your Heroku account. \n\n\nCreating your API Key access file\n\n\npsiTurk\n\n\nWhen you create your psiTurk account this will require a valid email address, and once you confirm your account you can then click on \nAPI Keys\n which will allow you to access your API keys as seen in the image below:\n\n\n\n\nAWS API Keys\n\n\nOne feature of the AWS API keys is that they are only displayed once, and while they can be regenerated that will render invalid previously generated keys. If you are running experiments using a laboratory account (or any other kind of group-owned account) if you regenerate keys that will stop other users who have previously generated keys from being able to use the AWS account. Unless you are sure that you will not be interrupting others' workflows, it is advised that you do \nnot\n generate new API keys. \n\n\nA corollary is that when you create your AWS account be sure to record your values for the following keys:\n\n\naws_access_key_id = \naws_secret_access_key =\n\n\n\nIf you are not the primary user of the account, see if you can obtain these keys from others who have successfully been able to use AWS.\n\n\nMaking the \n.wallaceconfig\n file\n\n\nPlace your psiTurk and Amazon Web Services credentials in \n~/.wallaceconfig\n (you may need to create this file:  \ntouch ~/.wallaceconfig\n); it should live in your home directory). \n\n\nIn your preferred text editor, edit the file to include the following text(filling in the ALL_CAPS with your relevant values):\n\n\n$ cat ~/.wallaceconfig\n[AWS Access]\naws_access_key_id = YOUR_AWS_ACCESS_KEY_ID\naws_secret_access_key = YOUR_AWS_SECRET_ACCESS_KEY\n\n[psiTurk Access]\npsiturk_access_key_id = YOUR_PSITURK_ACCESS_KEY_ID\npsiturk_secret_access_id = YOUR_PSITURK_SECRET_ACCESS_ID\n\n\n\nHeroku\n\n\nSign up for \nHeroku\n, and install the \nHeroku toolbelt\n. \n\n\nYou should be able to see an interface that looks like the following\n\n\n\n\nThen, log in from the command line:\n\n\nheroku login\n\n\n\nYou won't need to interact with Heroku directly from here on out --- the Wallace command line tool handles that for you.\n\n\nReady to Wallace your first experiment\u203d\n\n\nNow you're all set up with the tools you need to work with Wallace. \n\n\nNow it's time to test Wallace to make sure it's working on your system. \nclick here to see the next steps and demos\n.", 
            "title": "Keys for AWS, Heroku, etc."
        }, 
        {
            "location": "/AWS-etc-keys/#creating-your-api-key-access-file", 
            "text": "", 
            "title": "Creating your API Key access file"
        }, 
        {
            "location": "/AWS-etc-keys/#psiturk", 
            "text": "When you create your psiTurk account this will require a valid email address, and once you confirm your account you can then click on  API Keys  which will allow you to access your API keys as seen in the image below:", 
            "title": "psiTurk"
        }, 
        {
            "location": "/AWS-etc-keys/#aws-api-keys", 
            "text": "One feature of the AWS API keys is that they are only displayed once, and while they can be regenerated that will render invalid previously generated keys. If you are running experiments using a laboratory account (or any other kind of group-owned account) if you regenerate keys that will stop other users who have previously generated keys from being able to use the AWS account. Unless you are sure that you will not be interrupting others' workflows, it is advised that you do  not  generate new API keys.   A corollary is that when you create your AWS account be sure to record your values for the following keys:  aws_access_key_id = \naws_secret_access_key =  If you are not the primary user of the account, see if you can obtain these keys from others who have successfully been able to use AWS.", 
            "title": "AWS API Keys"
        }, 
        {
            "location": "/AWS-etc-keys/#making-the-wallaceconfig-file", 
            "text": "Place your psiTurk and Amazon Web Services credentials in  ~/.wallaceconfig  (you may need to create this file:   touch ~/.wallaceconfig ); it should live in your home directory).   In your preferred text editor, edit the file to include the following text(filling in the ALL_CAPS with your relevant values):  $ cat ~/.wallaceconfig\n[AWS Access]\naws_access_key_id = YOUR_AWS_ACCESS_KEY_ID\naws_secret_access_key = YOUR_AWS_SECRET_ACCESS_KEY\n\n[psiTurk Access]\npsiturk_access_key_id = YOUR_PSITURK_ACCESS_KEY_ID\npsiturk_secret_access_id = YOUR_PSITURK_SECRET_ACCESS_ID", 
            "title": "Making the .wallaceconfig file"
        }, 
        {
            "location": "/AWS-etc-keys/#heroku", 
            "text": "Sign up for  Heroku , and install the  Heroku toolbelt .   You should be able to see an interface that looks like the following   Then, log in from the command line:  heroku login  You won't need to interact with Heroku directly from here on out --- the Wallace command line tool handles that for you.", 
            "title": "Heroku"
        }, 
        {
            "location": "/AWS-etc-keys/#ready-to-wallace-your-first-experiment", 
            "text": "Now you're all set up with the tools you need to work with Wallace.   Now it's time to test Wallace to make sure it's working on your system.  click here to see the next steps and demos .", 
            "title": "Ready to Wallace your first experiment\u203d"
        }, 
        {
            "location": "/Wallace-with-Anaconda/", 
            "text": "If you are interested in developing Wallace but already use \nAnaconda\n, you'll need to slightly adapt the standard instructions for Wallace.\n\n\nInstall Wallace\n\n\nYou'll follow all of the \nWallace development installation instructions\n, \nwith the exception of the virtual environment step\n.\n\n\nConfirm Wallace works\n\n\nNow, we need to make sure that Wallace and Anaconda play nice with one another. At this point, we'd check to make sure that Wallace is properly installed by typing\n\n\nwallace --version\n\n\n\n\ninto the command line. For those of us with Anaconda, we'll get a long error message. Don't panic! Add the following to your \n.bash_profile\n:\n\n\nexport DYLD_FALLBACK_LIBRARY_PATH=$HOME/anaconda/lib/:$DYLD_FALLBACK_LIBRARY_PATH\n\n\n\n\nAfter you \nsource\n your \n.bash_profile\n, you can check your Wallace version (using the same command that we used earlier), which should return the Wallace version that you've installed.\n\n\nRe-link \nopenssl\n\n\nFinally, you'll need to re-link \nopenssl\n. Run the following:\n\n\nbrew install --upgrade openssl\nbrew unlink openssl \n brew link openssl --force", 
            "title": "For users of Anaconda"
        }, 
        {
            "location": "/Wallace-with-Anaconda/#install-wallace", 
            "text": "You'll follow all of the  Wallace development installation instructions ,  with the exception of the virtual environment step .", 
            "title": "Install Wallace"
        }, 
        {
            "location": "/Wallace-with-Anaconda/#confirm-wallace-works", 
            "text": "Now, we need to make sure that Wallace and Anaconda play nice with one another. At this point, we'd check to make sure that Wallace is properly installed by typing  wallace --version  into the command line. For those of us with Anaconda, we'll get a long error message. Don't panic! Add the following to your  .bash_profile :  export DYLD_FALLBACK_LIBRARY_PATH=$HOME/anaconda/lib/:$DYLD_FALLBACK_LIBRARY_PATH  After you  source  your  .bash_profile , you can check your Wallace version (using the same command that we used earlier), which should return the Wallace version that you've installed.", 
            "title": "Confirm Wallace works"
        }, 
        {
            "location": "/Wallace-with-Anaconda/#re-link-openssl", 
            "text": "Finally, you'll need to re-link  openssl . Run the following:  brew install --upgrade openssl\nbrew unlink openssl   brew link openssl --force", 
            "title": "Re-link openssl"
        }
    ]
}